{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS studio\\\\web_devlopment\\\\Projects\\\\frontend\\\\src\\\\components\\\\ui\\\\theme-provider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  theme: \"system\",\n  setTheme: () => null\n};\nconst ThemeProviderContext = /*#__PURE__*/createContext(initialState);\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}) {\n  _s();\n  const [theme, setTheme] = useState(() => localStorage.getItem(storageKey) || defaultTheme);\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n      root.classList.add(systemTheme);\n      return;\n    }\n    root.classList.add(theme);\n  }, [theme]);\n  const value = {\n    theme,\n    setTheme: theme => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProviderContext.Provider, {\n    ...props,\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(ThemeProvider, \"YkY4D08WntVjXLroWjAGi4sfNRs=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) throw new Error(\"useTheme must be used within a ThemeProvider\");\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","initialState","theme","setTheme","ThemeProviderContext","ThemeProvider","children","defaultTheme","storageKey","props","_s","localStorage","getItem","root","window","document","documentElement","classList","remove","systemTheme","matchMedia","matches","add","value","setItem","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","undefined","Error","$RefreshReg$"],"sources":["D:/VS studio/web_devlopment/Projects/frontend/src/components/ui/theme-provider.tsx"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\"\r\n\r\ntype Theme = \"dark\" | \"light\" | \"system\"\r\n\r\ntype ThemeProviderProps = {\r\n  children: React.ReactNode\r\n  defaultTheme?: Theme\r\n  storageKey?: string\r\n}\r\n\r\ntype ThemeProviderState = {\r\n  theme: Theme\r\n  setTheme: (theme: Theme) => void\r\n}\r\n\r\nconst initialState: ThemeProviderState = {\r\n  theme: \"system\",\r\n  setTheme: () => null,\r\n}\r\n\r\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\r\n\r\nexport function ThemeProvider({\r\n  children,\r\n  defaultTheme = \"system\",\r\n  storageKey = \"vite-ui-theme\",\r\n  ...props\r\n}: ThemeProviderProps) {\r\n  const [theme, setTheme] = useState<Theme>(\r\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\r\n  )\r\n\r\n  useEffect(() => {\r\n    const root = window.document.documentElement\r\n\r\n    root.classList.remove(\"light\", \"dark\")\r\n\r\n    if (theme === \"system\") {\r\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\r\n        .matches\r\n        ? \"dark\"\r\n        : \"light\"\r\n\r\n      root.classList.add(systemTheme)\r\n      return\r\n    }\r\n\r\n    root.classList.add(theme)\r\n  }, [theme])\r\n\r\n  const value = {\r\n    theme,\r\n    setTheme: (theme: Theme) => {\r\n      localStorage.setItem(storageKey, theme)\r\n      setTheme(theme)\r\n    },\r\n  }\r\n\r\n  return (\r\n    <ThemeProviderContext.Provider {...props} value={value}>\r\n      {children}\r\n    </ThemeProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeProviderContext)\r\n\r\n  if (context === undefined)\r\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\r\n\r\n  return context\r\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAetE,MAAMC,YAAgC,GAAG;EACvCC,KAAK,EAAE,QAAQ;EACfC,QAAQ,EAAEA,CAAA,KAAM;AAClB,CAAC;AAED,MAAMC,oBAAoB,gBAAGT,aAAa,CAAqBM,YAAY,CAAC;AAE5E,OAAO,SAASI,aAAaA,CAAC;EAC5BC,QAAQ;EACRC,YAAY,GAAG,QAAQ;EACvBC,UAAU,GAAG,eAAe;EAC5B,GAAGC;AACe,CAAC,EAAE;EAAAC,EAAA;EACrB,MAAM,CAACR,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAChC,MAAOa,YAAY,CAACC,OAAO,CAACJ,UAAU,CAAC,IAAcD,YACvD,CAAC;EAEDV,SAAS,CAAC,MAAM;IACd,MAAMgB,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACC,eAAe;IAE5CH,IAAI,CAACI,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;IAEtC,IAAIhB,KAAK,KAAK,QAAQ,EAAE;MACtB,MAAMiB,WAAW,GAAGL,MAAM,CAACM,UAAU,CAAC,8BAA8B,CAAC,CAClEC,OAAO,GACN,MAAM,GACN,OAAO;MAEXR,IAAI,CAACI,SAAS,CAACK,GAAG,CAACH,WAAW,CAAC;MAC/B;IACF;IAEAN,IAAI,CAACI,SAAS,CAACK,GAAG,CAACpB,KAAK,CAAC;EAC3B,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMqB,KAAK,GAAG;IACZrB,KAAK;IACLC,QAAQ,EAAGD,KAAY,IAAK;MAC1BS,YAAY,CAACa,OAAO,CAAChB,UAAU,EAAEN,KAAK,CAAC;MACvCC,QAAQ,CAACD,KAAK,CAAC;IACjB;EACF,CAAC;EAED,oBACEF,OAAA,CAACI,oBAAoB,CAACqB,QAAQ;IAAA,GAAKhB,KAAK;IAAEc,KAAK,EAAEA,KAAM;IAAAjB,QAAA,EACpDA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACoB,CAAC;AAEpC;AAACnB,EAAA,CAzCeL,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AA2C7B,OAAO,MAAM0B,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGrC,UAAU,CAACQ,oBAAoB,CAAC;EAEhD,IAAI6B,OAAO,KAAKC,SAAS,EACvB,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EAEjE,OAAOF,OAAO;AAChB,CAAC;AAAAD,GAAA,CAPYD,QAAQ;AAAA,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}