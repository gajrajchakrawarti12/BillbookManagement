{"ast":null,"code":"import API_URL from \"./requests\";\nexport async function getCompany(userId) {\n  try {\n    const response = await fetch(`${API_URL}/companies/${userId}`, {\n      method: \"GET\",\n      credentials: \"include\"\n    });\n    if (!response.ok) {\n      consol(`Upload failed: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating user data:\", error);\n    throw error;\n  }\n}\nexport async function postCompany(companyData) {\n  try {\n    const response = await fetch(`${API_URL}/companies/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      throw new Error(`Update failed: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.log(\"error to post company:\", error);\n    throw error;\n  }\n}\nexport async function putCompany(companyId, companyData) {\n  try {\n    const response = await fetch(`${API_URL}/companies/${companyId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      throw new Error(`Update failed: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.log(\"error to post company:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_URL","getCompany","userId","response","fetch","method","credentials","ok","consol","statusText","json","error","console","postCompany","companyData","headers","body","JSON","stringify","Error","log","putCompany","companyId"],"sources":["D:/VS studio/web_devlopment/Projects/frontend/src/requests/CompanyRequest.tsx"],"sourcesContent":["import { Company } from \"../interfaces/Company\";\r\nimport API_URL from \"./requests\";\r\n\r\nexport async function getCompany(userId: string) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/companies/${userId}`, {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    });\r\n    if (!response.ok) {\r\n      consol(`Upload failed: ${response.statusText}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error updating user data:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function postCompany(companyData: Partial<Company>) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/companies/`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(companyData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Update failed: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.log(\"error to post company:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function putCompany(companyId: Company[\"_id\"], companyData: Partial<Company>) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/companies/${companyId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(companyData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Update failed: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.log(\"error to post company:\", error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AACA,OAAOA,OAAO,MAAM,YAAY;AAEhC,OAAO,eAAeC,UAAUA,CAACC,MAAc,EAAE;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,cAAcE,MAAM,EAAE,EAAE;MAC7DG,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE;IACf,CAAC,CAAC;IACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChBC,MAAM,CAAC,kBAAkBL,QAAQ,CAACM,UAAU,EAAE,CAAC;IACjD;IACA,OAAO,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeE,WAAWA,CAACC,WAA6B,EAAE;EAC/D,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,aAAa,EAAE;MACpDK,MAAM,EAAE,MAAM;MACdU,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDT,WAAW,EAAE,SAAS;MACtBU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,WAAW;IAClC,CAAC,CAAC;IAEF,IAAI,CAACX,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIY,KAAK,CAAC,kBAAkBhB,QAAQ,CAACM,UAAU,EAAE,CAAC;IAC1D;IAEA,OAAO,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACQ,GAAG,CAAC,wBAAwB,EAAET,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeU,UAAUA,CAACC,SAAyB,EAAER,WAA6B,EAAE;EACzF,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,cAAcsB,SAAS,EAAE,EAAE;MAChEjB,MAAM,EAAE,KAAK;MACbU,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDT,WAAW,EAAE,SAAS;MACtBU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,WAAW;IAClC,CAAC,CAAC;IAEF,IAAI,CAACX,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIY,KAAK,CAAC,kBAAkBhB,QAAQ,CAACM,UAAU,EAAE,CAAC;IAC1D;IAEA,OAAO,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACQ,GAAG,CAAC,wBAAwB,EAAET,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}