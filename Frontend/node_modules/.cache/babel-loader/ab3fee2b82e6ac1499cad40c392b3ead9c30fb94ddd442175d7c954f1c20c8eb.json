{"ast":null,"code":"import API_URL from \"./requests\";\nexport async function uploadImage(data) {\n  if (!data) {\n    throw new Error(\"No file provided for upload.\");\n  }\n  const formData = new FormData();\n  formData.append(\"file\", data);\n  try {\n    const response = await fetch(`${API_URL}/files/`, {\n      method: \"POST\",\n      body: formData,\n      credentials: \"include\" // equivalent to withCredentials: true\n    });\n    console.log(response);\n    if (!response.ok) {\n      throw new Error(`Upload failed: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error uploading image:\", error);\n    throw error;\n  }\n}\nexport async function deleteImage(filename) {\n  try {\n    const response = await fetch(`${API_URL}/files/${filename}`, {\n      method: \"DELETE\",\n      credentials: \"include\"\n    });\n    if (!response.ok) {\n      throw new Error(`Delete failed: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting image:\", error);\n    throw error;\n  }\n}\nexport async function updateImage(filename, data) {\n  if (!data) {\n    throw new Error(\"No file provided for upload.\");\n  }\n  const formData = new FormData();\n  formData.append(\"file\", data);\n  try {\n    const response = await fetch(`${API_URL}/files/${filename}`, {\n      method: \"PUT\",\n      body: formData,\n      credentials: \"include\" // equivalent to withCredentials: true\n    });\n    if (!response.ok) {\n      throw new Error(`Update failed: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating image:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_URL","uploadImage","data","Error","formData","FormData","append","response","fetch","method","body","credentials","console","log","ok","statusText","json","error","deleteImage","filename","updateImage"],"sources":["D:/VS studio/web_devlopment/Projects/frontend/src/requests/ImageRequest.tsx"],"sourcesContent":["import API_URL from \"./requests\";\r\n\r\nexport async function uploadImage(data: File | undefined) {\r\n  if (!data) {\r\n    throw new Error(\"No file provided for upload.\");\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append(\"file\", data);\r\n\r\n  try {\r\n    const response = await fetch(`${API_URL}/files/`, {\r\n      method: \"POST\",\r\n      body: formData,\r\n      credentials: \"include\", // equivalent to withCredentials: true\r\n    });\r\n    console.log(response);\r\n    \r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Upload failed: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error uploading image:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function deleteImage(filename: string) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/files/${filename}`, {\r\n      method: \"DELETE\",\r\n      credentials: \"include\",\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Delete failed: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error deleting image:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateImage(filename: string, data: File | undefined) {\r\n  if (!data) {\r\n    throw new Error(\"No file provided for upload.\");\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append(\"file\", data);\r\n\r\n  try {\r\n    const response = await fetch(`${API_URL}/files/${filename}`, {\r\n      method: \"PUT\",\r\n      body: formData,\r\n      credentials: \"include\", // equivalent to withCredentials: true\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Update failed: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error updating image:\", error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,YAAY;AAEhC,OAAO,eAAeC,WAAWA,CAACC,IAAsB,EAAE;EACxD,IAAI,CAACA,IAAI,EAAE;IACT,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;EAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,SAAS,EAAE;MAChDS,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN,QAAQ;MACdO,WAAW,EAAE,SAAS,CAAE;IAC1B,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;IAGrB,IAAI,CAACA,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIX,KAAK,CAAC,kBAAkBI,QAAQ,CAACQ,UAAU,EAAE,CAAC;IAC1D;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeC,WAAWA,CAACC,QAAgB,EAAE;EAClD,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,UAAUmB,QAAQ,EAAE,EAAE;MAC3DV,MAAM,EAAE,QAAQ;MAChBE,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIX,KAAK,CAAC,kBAAkBI,QAAQ,CAACQ,UAAU,EAAE,CAAC;IAC1D;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeG,WAAWA,CAACD,QAAgB,EAAEjB,IAAsB,EAAE;EAC1E,IAAI,CAACA,IAAI,EAAE;IACT,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;EAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,UAAUmB,QAAQ,EAAE,EAAE;MAC3DV,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEN,QAAQ;MACdO,WAAW,EAAE,SAAS,CAAE;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIX,KAAK,CAAC,kBAAkBI,QAAQ,CAACQ,UAAU,EAAE,CAAC;IAC1D;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}